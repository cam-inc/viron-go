// Package components provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package components

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
)

// CreatedAt 作成日時
type CreatedAt = time.Time

// Pager defines model for Pager.
type Pager struct {
	CurrentPage int `json:"currentPage"`
	MaxPage     int `json:"maxPage"`
}

// UpdatedAt 更新日時
type UpdatedAt = time.Time

// IdPathParam defines model for IdPathParam.
type IdPathParam = string

// IdQueryParam defines model for IdQueryParam.
type IdQueryParam = string

// PagerPageQueryParam defines model for PagerPageQueryParam.
type PagerPageQueryParam = int

// PagerSizeQueryParam defines model for PagerSizeQueryParam.
type PagerSizeQueryParam = int

// SortQueryParam defines model for SortQueryParam.
type SortQueryParam = []string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/5SUvW4TQRDHX8UaUYC42E7SbQMRlTujKBUCabI3Pk+0t7uZnUviBDdUlFQgBC09BS1v",
	"g/wcaPdCiIPjiOakmbn5/+ZLewU2tDF48prAXEFEwZaUpFiTeoo6n2ZfNtmDgYg6hwo8tgQGuIYKhE47",
	"FqrBqHRUQbJzajFn6CLmv5IK+waWywom9cuOZLGueZpdd0S3iUyxIcmfda2akhWOyiGL5vjAd+0xySDM",
	"Bo6TQrWRF7GhTUT2Sg3JX+QhX25F5vgDrMSXD7IOg+hWTBAdpEiWZ2wxO29B6SK6UBOYGbpE9xQRRNeK",
	"YKX2ev+qJDnlzfDpM/MYk32b4U8eQXV3ERW07Cd95u5NFEVwkYNJFy47ZkHa0laPK5gXQqhUH+i/zf36",
	"+XX1/sPq07fV53dQlWxUMFCj0o5yS5sKKdsp9UuIJMpUMLYTIa85umnUFbR4cV9wefuuX938Wa2Jvr6p",
	"JRyfkNWseRTr+3pbffmx+vj9v3rLcyPbCeviMM+vb+zkvKjPXDgvNrfRseXixE7nQfiyHMaRODAwV43J",
	"jEYuWHTzkNTsj8fjUeLGsy+HEGIvjJENWkspgYGD6WRwbSxzIX9azYS93sV+Fsr0WMuyn5+xBD+iC2yj",
	"o50mOPTN4NYbU8EZSerHMR6Oh7t5ZCGSx8hgYH84Hu5BVV6ZBMZ3zi1/BwAA///fTkT9pAQAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
