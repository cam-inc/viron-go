// Package adminusers provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package adminusers

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/cam-inc/viron-go/lib/routes/components"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	JwtScopes = "jwt.Scopes"
)

// VironAdminUser defines model for VironAdminUser.
type VironAdminUser struct {
	// CreatedAt 作成日時
	CreatedAt *externalRef0.VironCreatedAt `json:"createdAt,omitempty"`

	// Email Eメールアドレス
	Email openapi_types.Email `json:"email"`

	// Id 管理ユーザーID
	Id string `json:"id"`

	// RoleIds ロール一覧
	RoleIds *[]string `json:"roleIds,omitempty"`

	// UpdatedAt 更新日時
	UpdatedAt *externalRef0.VironUpdatedAt `json:"updatedAt,omitempty"`
}

// VironAdminUserCreatePayload defines model for VironAdminUserCreatePayload.
type VironAdminUserCreatePayload struct {
	// Email Eメールアドレス
	Email openapi_types.Email `json:"email"`

	// Password パスワード
	Password string `json:"password"`

	// RoleIds ロールID
	RoleIds *[]string `json:"roleIds,omitempty"`
}

// VironAdminUserList defines model for VironAdminUserList.
type VironAdminUserList = []VironAdminUser

// VironAdminUserListWithPager defines model for VironAdminUserListWithPager.
type VironAdminUserListWithPager struct {
	CurrentPage int                `json:"currentPage"`
	List        VironAdminUserList `json:"list"`
	MaxPage     int                `json:"maxPage"`
}

// VironAdminUserUpdatePayload defines model for VironAdminUserUpdatePayload.
type VironAdminUserUpdatePayload struct {
	// Password パスワード
	Password *string `json:"password,omitempty"`

	// RoleIds ロールID
	RoleIds *[]string `json:"roleIds,omitempty"`
}

// ListVironAdminUsersParams defines parameters for ListVironAdminUsers.
type ListVironAdminUsersParams struct {
	Id     *externalRef0.VironIdQueryParam     `form:"id,omitempty" json:"id,omitempty"`
	Email  *externalRef0.VironEmailQueryParam  `form:"email,omitempty" json:"email,omitempty"`
	RoleId *externalRef0.VironRoleIdQueryParam `form:"roleId,omitempty" json:"roleId,omitempty"`

	// Size Size of list
	Size *externalRef0.VironPagerSizeQueryParam `form:"size,omitempty" json:"size,omitempty"`

	// Page Page number of list
	Page *externalRef0.VironPagerPageQueryParam `form:"page,omitempty" json:"page,omitempty"`

	// Sort Sort specification of list
	Sort *externalRef0.VironSortQueryParam `form:"sort,omitempty" json:"sort,omitempty"`
}

// CreateVironAdminUserJSONRequestBody defines body for CreateVironAdminUser for application/json ContentType.
type CreateVironAdminUserJSONRequestBody = VironAdminUserCreatePayload

// UpdateVironAdminUserJSONRequestBody defines body for UpdateVironAdminUser for application/json ContentType.
type UpdateVironAdminUserJSONRequestBody = VironAdminUserUpdatePayload

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// list admin users
	// (GET /viron/adminusers)
	ListVironAdminUsers(w http.ResponseWriter, r *http.Request, params ListVironAdminUsersParams)
	// create an admin user
	// (POST /viron/adminusers)
	CreateVironAdminUser(w http.ResponseWriter, r *http.Request)
	// remove an admin user
	// (DELETE /viron/adminusers/{id})
	RemoveVironAdminUser(w http.ResponseWriter, r *http.Request, id externalRef0.VironIdPathParam)
	// update an admin user
	// (PUT /viron/adminusers/{id})
	UpdateVironAdminUser(w http.ResponseWriter, r *http.Request, id externalRef0.VironIdPathParam)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// list admin users
// (GET /viron/adminusers)
func (_ Unimplemented) ListVironAdminUsers(w http.ResponseWriter, r *http.Request, params ListVironAdminUsersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// create an admin user
// (POST /viron/adminusers)
func (_ Unimplemented) CreateVironAdminUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// remove an admin user
// (DELETE /viron/adminusers/{id})
func (_ Unimplemented) RemoveVironAdminUser(w http.ResponseWriter, r *http.Request, id externalRef0.VironIdPathParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// update an admin user
// (PUT /viron/adminusers/{id})
func (_ Unimplemented) UpdateVironAdminUser(w http.ResponseWriter, r *http.Request, id externalRef0.VironIdPathParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListVironAdminUsers operation middleware
func (siw *ServerInterfaceWrapper) ListVironAdminUsers(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, JwtScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListVironAdminUsersParams

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", r.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// ------------- Optional query parameter "email" -------------

	err = runtime.BindQueryParameter("form", true, false, "email", r.URL.Query(), &params.Email)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "email", Err: err})
		return
	}

	// ------------- Optional query parameter "roleId" -------------

	err = runtime.BindQueryParameter("form", true, false, "roleId", r.URL.Query(), &params.RoleId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "roleId", Err: err})
		return
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", r.URL.Query(), &params.Size)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "size", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", false, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListVironAdminUsers(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateVironAdminUser operation middleware
func (siw *ServerInterfaceWrapper) CreateVironAdminUser(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, JwtScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateVironAdminUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RemoveVironAdminUser operation middleware
func (siw *ServerInterfaceWrapper) RemoveVironAdminUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id externalRef0.VironIdPathParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, JwtScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RemoveVironAdminUser(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateVironAdminUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateVironAdminUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id externalRef0.VironIdPathParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, JwtScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateVironAdminUser(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/viron/adminusers", wrapper.ListVironAdminUsers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/viron/adminusers", wrapper.CreateVironAdminUser)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/viron/adminusers/{id}", wrapper.RemoveVironAdminUser)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/viron/adminusers/{id}", wrapper.UpdateVironAdminUser)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xYW28bxRf/Kv5P+5fA3cRuixBaCaUB+hBRqaElRSIx1cR77Ey0u7OdmU3jmJXqNUJN",
	"C1KJEFUEDwRBKJcGHhCiagsfZpoL3wLNjGN7L05sh7zw0mZ35/zO5Xdu4yaqUi+gPviCI7uJAsywBwKY",
	"fup9u3mDMOpf9jBx3wmBNWbVOXWE+MhGt9QrZCEfe4BsBOoYshCvLoGH1SnRCNQHLhjx6yiKrAz0jDOL",
	"xVISNsBiqYdKHGQhBrdCwsBBtmAhjKrieNO1klFAZ3EdmPonie0ArzISCEKVEvW94IfeIrACrRVcwgWy",
	"cvUHuA55FhBfQB3YYBOuk7UjTVDfj9HNydrIuq9RF4aJK9PnRoztdcrEkT5RJgo8gCqpkSpWL/s8hNXA",
	"pQ4gu4ZdDgM8pkwkbCICvE4dCAFMiXwweW7Kfgnz6odK+ctnkZW2vPsCM4Yb6pmLhqte1CjztGdGg0bW",
	"nk07HvHnODCti9EAmCBgao4BFuBMC/VwlkEN2ehMqReaUgerlI7Wm13ByOqUYCZil2V7S7afyfZPMv5G",
	"ttdl+2cZP0GWthSLvtrN+EicLNz+ztb+g49le1thxr/L9rOZt/JkDfs8CyDbj405L/64c7D9vUrMQwaO",
	"DXIYOOMFaq4rqKjpdZR5U/2HEcChWHpX6ax0ddPFZajq+CZZNKGfxQ2XYidL6b9PRoA5v02ZkxfRz2T8",
	"RLZ/0cjr/WhdISuR3sWpeTyxNj3x/sKC87+pM2f/vxCWyxdevVQ8V5q4qf6+WH1d/weV5mtWNB6/Oi+G",
	"5TbFymEUuvYfT8gV1QP66/mo/EhVZE6qZcHfI2pY1U0BY9e9WkP2/GhpaMQjK50tbsf24U3W3qajpmGy",
	"kapk3DHlMDB5//OplkmlwY01o/TF86/27j7Ye/jd3mbc77+K6IQgHuS5kJ8I2UEQMga+UF/zhrGFPLw6",
	"6GMqFw5PWgnQyhC+z/U32aTve1/+tvfFryP5ruwifo1mwbDKxkLIgfECDkhyqnOFRIQeqZdWlFkllywW",
	"+mSQhVaAcYNVnixPnkcWWp1Q2xTXhVmlvjA77nwTqShr4BkH2bpQkhXBddrWiY+NdWbVZMBpyKqghVaS",
	"PaNnX3Yk9sIg8KILKKpYKefPFLJSsrVjXi742jgZb+ze/WH/80ey9VC2tmXrIxnfzxUrFIsmLWX7qeFI",
	"tp/urt/7e/PbYrEg442DrU+UeOtP2dqUd+IFH1mozmgYINu0BgOLzMxPudrPhT6cY7vpMjQAHwcE2eji",
	"ZHnygmkFSzq1S4ZETaDhz26iOohhNozuppBk8coAFnvXmQHtuXekdOSFQTXqEeXT16UxIDL79RgYefeD",
	"cWFSN50xYFJLvaoGBjygPjdt70K5bK6eumD1eA0Ct9MJSstcpUWzb2UfbUz25rZuRslku/q2WdahGjIi",
	"Gjpllm8LZM9XlJk89DzMGp2WkWo/AtdVjqUbgyqEgHKRN6+2zNpXSs3Rgx8/PXjUq/9EdccbB3893733",
	"tarc+H6mCMykupHuTWoUABdvUKdxSqFNLsBRcv6o9hllWD5/SqaciFhz+Spgv4/do8iNrGwvKzWJExm+",
	"XRAwTE8z3TlD5zXw6EqWzpM2td4PLTnF90rW3qGjx7S9w0fPQkE4VM+XrZ3uerf/eF3GG53Bll8GZmk5",
	"9biddlElF/Ohiuok7Jn79Ai5H3U/Ng9/UEnvClEl+icAAP//oXM+PWIUAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./components.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
