// Package auditlogs provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package auditlogs

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	externalRef0 "github.com/cam-inc/viron-go/routes/components"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

const (
	JwtScopes = "jwt.Scopes"
)

// VironAuditLog defines model for VironAuditLog.
type VironAuditLog struct {
	// CreatedAt 日時
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// RequestBody リクエストボディ
	RequestBody *string `json:"requestBody,omitempty"`

	// RequestMethod リクエストメソッド
	RequestMethod *string `json:"requestMethod,omitempty"`

	// RequestUri リクエストURI
	RequestUri *string `json:"requestUri,omitempty"`

	// SourceIp ソースIP
	SourceIp *string `json:"sourceIp,omitempty"`

	// StatusCode ステータスコード
	StatusCode *int `json:"statusCode,omitempty"`

	// UserId ユーザーID
	UserId *string `json:"userId,omitempty"`
}

// VironAuditLogList defines model for VironAuditLogList.
type VironAuditLogList = []VironAuditLog

// VironAuditLogListWithPager defines model for VironAuditLogListWithPager.
type VironAuditLogListWithPager struct {
	CurrentPage int               `json:"currentPage"`
	List        VironAuditLogList `json:"list"`
	MaxPage     int               `json:"maxPage"`
}

// VironRequestMethodQueryParam defines model for VironRequestMethodQueryParam.
type VironRequestMethodQueryParam = string

// VironRequestUriQueryParam defines model for VironRequestUriQueryParam.
type VironRequestUriQueryParam = string

// VironSourceIpQueryParam defines model for VironSourceIpQueryParam.
type VironSourceIpQueryParam = string

// VironStatusCodeQueryParam defines model for VironStatusCodeQueryParam.
type VironStatusCodeQueryParam = int32

// VironUserIdQueryParam defines model for VironUserIdQueryParam.
type VironUserIdQueryParam = string

// ListVironAuditlogsParams defines parameters for ListVironAuditlogs.
type ListVironAuditlogsParams struct {
	UserId        *VironUserIdQueryParam        `form:"userId,omitempty" json:"userId,omitempty"`
	RequestUri    *VironRequestUriQueryParam    `form:"requestUri,omitempty" json:"requestUri,omitempty"`
	RequestMethod *VironRequestMethodQueryParam `form:"requestMethod,omitempty" json:"requestMethod,omitempty"`
	SourceIp      *VironSourceIpQueryParam      `form:"sourceIp,omitempty" json:"sourceIp,omitempty"`
	StatusCode    *VironStatusCodeQueryParam    `form:"statusCode,omitempty" json:"statusCode,omitempty"`

	// Size Size of list
	Size *externalRef0.VironPagerSizeQueryParam `form:"size,omitempty" json:"size,omitempty"`

	// Page Page number of list
	Page *externalRef0.VironPagerPageQueryParam `form:"page,omitempty" json:"page,omitempty"`

	// Sort Sort specification of list
	Sort *externalRef0.VironSortQueryParam `form:"sort,omitempty" json:"sort,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// list audit logs
	// (GET /viron/auditlogs)
	ListVironAuditlogs(w http.ResponseWriter, r *http.Request, params ListVironAuditlogsParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// list audit logs
// (GET /viron/auditlogs)
func (_ Unimplemented) ListVironAuditlogs(w http.ResponseWriter, r *http.Request, params ListVironAuditlogsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListVironAuditlogs operation middleware
func (siw *ServerInterfaceWrapper) ListVironAuditlogs(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, JwtScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListVironAuditlogsParams

	// ------------- Optional query parameter "userId" -------------

	err = runtime.BindQueryParameter("form", true, false, "userId", r.URL.Query(), &params.UserId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	// ------------- Optional query parameter "requestUri" -------------

	err = runtime.BindQueryParameter("form", true, false, "requestUri", r.URL.Query(), &params.RequestUri)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestUri", Err: err})
		return
	}

	// ------------- Optional query parameter "requestMethod" -------------

	err = runtime.BindQueryParameter("form", true, false, "requestMethod", r.URL.Query(), &params.RequestMethod)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestMethod", Err: err})
		return
	}

	// ------------- Optional query parameter "sourceIp" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourceIp", r.URL.Query(), &params.SourceIp)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sourceIp", Err: err})
		return
	}

	// ------------- Optional query parameter "statusCode" -------------

	err = runtime.BindQueryParameter("form", true, false, "statusCode", r.URL.Query(), &params.StatusCode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "statusCode", Err: err})
		return
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", r.URL.Query(), &params.Size)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "size", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", false, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListVironAuditlogs(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/viron/auditlogs", wrapper.ListVironAuditlogs)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/5xWUW/jxBP/KtH+7+GP8CWh9+YXOOAloujKVYWHKKCtM0m3sr2+3XVpLkQitnTAA9IJ",
	"JNAJJHQ60SIkCgKBqDjgwyxqj2+BZu3EdrxN3HuJ4t2Z38zu/Oa3MyUeDyIeQqgkcackooIGoECYr7eZ",
	"4OFduBeDVG+COuDDt2IQkx00wn0WEpfcwyXikJAGQFwiyubEIdI7gICitZpEaCCVYOGYzGZOBX9PsMbg",
	"e4I1Qd7lsfCgF23GlbllI1RFVSxf40NogLu0rSCPuAioIi5hobq1RZxFKBYqGIMoYu1JEL0Glx4buw3Z",
	"F5V+z4Dv0DEI/KniD0F6gkWKcQyE+60wDvZBtPio5TOpiGPNIaJjsGVQPpQ1hV12f20KuL8htmT3rx17",
	"lwu1NiwXqiUj8NiIeRQXS0nAceRjVd0R9SVckRQXqpIUUxDkXaYUCHR5t/3iy+7/qfQ+wOAv3Ci4sCjc",
	"coEKQSf4LdXExwVkkTlZFqHo2NvxkKltPjahBI9AKAZm2xNAFQxvq/pxL7789uJRQpyCnEOq4KZiAdiS",
	"yjvxVT6c1LF0+r1OftTJdzo51+nHOv1apx/p5MkaoFwvNkM91smfOk11+skaNBSITVB7d3s2hKUU1P0x",
	"8FOdnPd2rI5Fr1tcz3X6wHj/jf+TX/B/+QhLpjqLZrbkf2IQftPp097r9RQKqvD9Q/AUWajIgg/byN0y",
	"D28IGBGX/K9T9EYnJ1OnyiQLDWvQ7zB1YBoaoanv3xkRt78+iFUPyMxZ5a2fZ944YXPUWU4IJmBI3H6G",
	"Mqjd0uAqYbL0TywEhAp3bSrjkIAeX7W5kszC0qmA1rNDPxaOeJ0PFM/q87Fs0YhVlUoiO5gyMvHKER6o",
	"47P91tKDOOQIhMxwuu1u+yXikOObKOHSFM3jocpmgv6U4A0YWGSlucXirnO0iI5ZSLPElIjBycXQ7Rdv",
	"U6k3B/iVdxpiHlXI5mTS6fZrw0T1/S8e7eL9Kz+4hdoV16rovg9kNnBWm2v+uZ6fmXPp5FfTnQ/1/Ozy",
	"qycX3/yh0x908pNOPvv3i5+fnZzq+amef6rnf+n5I+KQseBxRNysIS7PHl8+fIDPlO1ci5oY01YZPKMh",
	"jyCkESMuudXutrfMxaoDQ71OVsaihO6UjMEi5GXUf37/8NnJKXFWSrhtL2Ex+l3RtoVJxz6eYOc2cbTO",
	"fNd0rg2kTf0tY2FjV9vs18C5ydzzvDArE9xzwKxMQrOsOyMeykz1trpdI36ZJhh1jyI/l5rOoUTaTUtz",
	"zrVUung1jNRVuXznjWzAAS8WTE0MMQ/fR2kYYJYyDgKKKmNEKZO3Vk5nRbFH+istODBB8r3pYlKr2swG",
	"s/8CAAD//+ORMYIXDQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./components.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
