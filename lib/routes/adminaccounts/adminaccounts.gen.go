// Package adminaccounts provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package adminaccounts

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/cam-inc/viron-go/routes/adminusers"
	externalRef1 "github.com/cam-inc/viron-go/routes/components"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

const (
	JwtScopes = "jwt.Scopes"
)

// VironAdminAccountUpdatePayload defines model for VironAdminAccountUpdatePayload.
type VironAdminAccountUpdatePayload struct {
	// Password パスワード
	Password string `json:"password"`
}

// UpdateVironAdminAccountJSONRequestBody defines body for UpdateVironAdminAccount for application/json ContentType.
type UpdateVironAdminAccountJSONRequestBody = VironAdminAccountUpdatePayload

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// list admin account
	// (GET /viron/adminaccounts)
	ListVironAdminAccounts(w http.ResponseWriter, r *http.Request)
	// update an admin account
	// (PUT /viron/adminaccounts/{id})
	UpdateVironAdminAccount(w http.ResponseWriter, r *http.Request, id externalRef1.VironIdPathParam)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// list admin account
// (GET /viron/adminaccounts)
func (_ Unimplemented) ListVironAdminAccounts(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// update an admin account
// (PUT /viron/adminaccounts/{id})
func (_ Unimplemented) UpdateVironAdminAccount(w http.ResponseWriter, r *http.Request, id externalRef1.VironIdPathParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListVironAdminAccounts operation middleware
func (siw *ServerInterfaceWrapper) ListVironAdminAccounts(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, JwtScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListVironAdminAccounts(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateVironAdminAccount operation middleware
func (siw *ServerInterfaceWrapper) UpdateVironAdminAccount(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id externalRef1.VironIdPathParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, JwtScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateVironAdminAccount(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/viron/adminaccounts", wrapper.ListVironAdminAccounts)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/viron/adminaccounts/{id}", wrapper.UpdateVironAdminAccount)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xWW4scRRT+K+NJfIk1Fzci0iDJenlYDGQf3AjOjqG2+8xMLX2zqnqTcWhwulESRIh5",
	"iKz6YALuCjHrFTEQ/TOVTNZ/IVU1t+3uWXeXPM00VefyXepUDcGNgjgKMZQCnCHElNMAJXLzNV+7fo3x",
	"KFzz1qnsr+s9epmF4EBMZR8IhDRAcIB5QIDjxwnj6IEjeYIEhNvHgOoIOYj1LiE5C3uQpul00ZQzNVa9",
	"gIWrrhslodyIPSpxnQ78iHqmPR7FyCXDSbNC3Ii4WfFQuJzFkkW6KZV/pbLHKv9Z5U9UfhsIdCMeUGn6",
	"nQQR3bpErvd/1LhwqU3rn6zWP9zc9F66dO78y5tJq7Xy+uULrzTr1/X/i+6b5gc7wzdICqSEZRF3e16m",
	"M9sZbW2jKyElQDXGRCCf8GowbwjkZYwuRyrRW5X64zzHLjhwrjkXpjnhr1nU6u1ZYEoAA8r8Mk3vqvy+",
	"Yeihyh6o/LbKf1LZ40W2bGAJLNFCl9I9P7j//M7nKt/TObM/Vf5k7Z2qWB75uOaJKtke2Xae/vXp4d4+",
	"EGASA1HhnFlWyjkd6O/EeOUMRG3MAosaGjNPGaCJ7L+va55K0CtMmIZmOI7rbLktKvAeW/IDpo9pzxqK",
	"+v7VLjjt09Fiw1NSNKQ/QXQmIIaOIs0mY5nVTkpgualL3nn693fjW3fGX/8w3s0WHazFrUsWYJUTq0GX",
	"D2HCOYZSry54kYUSLUcQ0JvLFgtgpzvJkaRVnlru0xL28bd/jO/9cirsui8WdqNyMiNeTatXo3YM12jM",
	"aiJGl3WZS/U2oRMy6euMl3d0d02fbdVs6CQKCOwgFzZpq9FqvAoEbtZj2tOktvXtEkp777SHoOk2qdc8",
	"cIwlSreBMCO7x0JqO7WXC0cRJdxFE7dTjJkDl3TLR0g7pDhzsgcqe6iyPZX/rvJbhz8+enbwjcru/nvv",
	"t8O9fTXaV6Mv1egfNdoFAj0eJTE49qay4w7sLKwuPaHIbK9VVrI+j2IMaczAgYuNVmPF3k19472mpddQ",
	"S6dEOEPooTzJBC4UBVJg+soypjmKOAqFPQArrZZ9DxjFzFCJY39ihua20MWHC/f8mYfDfHAZhx5Fd/U9",
	"c5wEuglncmB8s31DgtPuaF1FEgSUDyb2KZlR0p62WoVQHZ21iufmkHmpGQfJycgeHRT4HuefPfv+V5Xd",
	"tUdUjXZV9kVJBHu0r1U4aPE9tmSAz7c0j3uvaYb0IEIh34q8wQuT838ebenRAajPbFoy12tlck+stb33",
	"azQ8neDpbH04fbvulI9B2kn/CwAA//+9PPRCIgsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./adminusers.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "./components.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
